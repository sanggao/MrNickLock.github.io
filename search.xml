<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>博客迁移计划</title>
      <link href="/2017/10/11/blog%E8%BF%81%E7%A7%BB%E8%AE%A1%E5%88%92/"/>
      <url>/2017/10/11/blog%E8%BF%81%E7%A7%BB%E8%AE%A1%E5%88%92/</url>
      <content type="html"><![CDATA[<p>为方便移动端书写，以及Dropbox自动同步，博客迁移至VPS，<a href="https://nickhoo.com/" target="_blank" rel="noopener">NickHoo.com</a></p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>SublimeText巧计</title>
      <link href="/2017/08/24/SublimeText%E5%B7%A7%E8%AE%A1/"/>
      <url>/2017/08/24/SublimeText%E5%B7%A7%E8%AE%A1/</url>
      <content type="html"><![CDATA[<h2 id="列模式，多行快速编辑"><a href="#列模式，多行快速编辑" class="headerlink" title="列模式，多行快速编辑"></a>列模式，多行快速编辑</h2><ol><li>鼠标选中多行，按下 Ctrl Shift L (Command Shift L) 即可同时编辑这些行； </li><li>鼠标选中文本，反复按 CTRL D (Command D) 即可继续向下同时选中下一个相同的文本进行同时编辑； </li><li>鼠标选中文本，按下 Alt F3 (Win) 或 Ctrl Command G(Mac) 即可一次性选择全部的相同文本进行同时编辑； </li><li>Shift 鼠标右键 (Win) 或 Option 鼠标左键 (Mac) 或使用鼠标中键可以用鼠标进行竖向多行选择； </li><li>Ctrl 鼠标左键(Win) 或 Command 鼠标左键(Mac) 可以手动选择同时要编辑。</li></ol>]]></content>
      
      
    </entry>
    
    <entry>
      <title>Cognos笔记</title>
      <link href="/2017/08/22/Cognos%E7%AC%94%E8%AE%B0/"/>
      <url>/2017/08/22/Cognos%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<p><strong>Framework Manager</strong>：可以访问企业数据库的详细数据，管理和维护元数据，用以支持业务业务决策。</p><p><strong>Transformer</strong>（数据转换器）：可以将平面文件或是二维关系型数据生成高度压缩的多维立方体<strong>PowerCube</strong>。并且通过Transformer，可以将来自不同数据源的数据进行整合。（例如，可将数据仓库的数据和电子表格数据汇集在一个或多个相互联结的PowerCube）</p><p><strong>PowerPlay</strong>：展现经过汇总的多维数据，可以使管理者能够探查和分析所有影响业务运营的因素。PowerPlay是开放的OLAP解决方案，它可以访问、探查和分析广泛的数据，而不仅针对PowerCube一种。在PowerPlay中，用户不仅可以考察汇总层的信息，还可以不断深入深入钻取有元数据提供的详细信息。</p><p><strong>Report Studio/Query Studio</strong>：用于创建Report</p><h3 id="关于Transfomer"><a href="#关于Transfomer" class="headerlink" title="关于Transfomer"></a>关于Transfomer</h3><ul><li>Transfomer 是用于创建PowerPlay应用模型的工具。Transfomer模型帮助将数据从各种数据源组织进多维的PowerCube。在最佳设计的PowerCube中，可以创建能够比较数据和发现趋势的报表。</li><li>在用Transfomer建立模型之前，非常重要的一点是，首先要评测数据，以及确定如何构造它们，以使它们能够支持业务分析的类型；然后用Transfomer构造创建数据的模型；最后创建一个PowerCube。让PowerPlay用户直接查看和应用其中的数据。</li><li><p>Transfomer不需要编程，因此它易于使用；并能够以快速有效的方法传递多维数据。</p></li><li><p>Transfomer和它的功能：</p><ul><li>整合数据源数据到模型中</li><li>创建和定制维度结构以定义模型</li><li>为模型确定度量</li><li>为报表处理时间周期</li></ul></li></ul><p><strong>数据仓库</strong>是分布式数据源的存储体系结构。其特点是主要处理趋于静态的数据，是一个典型的主题数据库。它使用户深入企业数据库当中跟踪操作数据，以得到业务趋势，最终完成预测和计划。</p><p><strong>数据集市</strong>是一种便捷的数据源子集的存储方式，通常来自数据仓库。它是从数据仓库抽取的一个特定的主题。</p><p><strong>多维分析</strong>是一种分析数据的方法，它表明了数据之间许多不同的关系，而每一个关系就代表着一个维度。它使用高度压缩的汇总数据，并以各种简易的方式表达结果。多维分析 的实施是在数据集市上并依赖于数据仓库。<br><strong>OLAP</strong> (Online Analytical Processing)是多维数据的表示方法。它通过维度查看和处理数据，把易于访问的信息提供给管理者和分析者用于决策支持。</p><p>Transformer用于生成PowerCube的模型三个主要部分：</p><ul><li>数据源：可以有结构数据（文本）或事务数据(数字)。? 参考第三章“组织数据源数据”。?</li><li>维度图：一个维度图是一个显示模型中所有维度和它们所包含的层的表。? 参考第四章“建立模型”。?</li><li>度量： 度量是能够反映企业某方面业务状况的数字性指标。? 参考第八章“度量”。?</li></ul><p><strong>PowerCube是</strong>:</p><ul><li>多维数据的逻辑结构和物理结构。</li><li>由Transformer模型生成，并用于在PowerPlay中查看和操作的数据包。</li></ul>]]></content>
      
      
    </entry>
    
    <entry>
      <title>CentOS Kettle 部署记录</title>
      <link href="/2017/08/21/CentOS-7-Kettle%E9%83%A8%E7%BD%B2/"/>
      <url>/2017/08/21/CentOS-7-Kettle%E9%83%A8%E7%BD%B2/</url>
      <content type="html"><![CDATA[<p>Kettle 作为开源 ETL 工具中的翘楚（之一），依赖 Java 实现跨平台。 Windows 下的部署很傻瓜式， Linux 的部署过程如下文。</p><p>PS: Linux 下启动 Kettle 仓库管理常见<strong>白屏异常</strong>，解决方式见文末。</p><ul><li>查看 Linux 自带的 JDK 版本（默认为 OpenJDK , 建议安装完整的 OracleJDK ）</li></ul><pre class="line-numbers language-bash"><code class="language-bash">rpm -qa<span class="token operator">|</span><span class="token function">grep</span> java<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>移除现有 Java 包，并安装 完整的 OracleJDK</li></ul><pre class="line-numbers language-bash"><code class="language-bash">yum remove java*<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">tar</span> -zxvf jdk8.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash"><code class="language-bash">vim /etc/profile<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">source</span> /etc/profile<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>尝试启动</li></ul><pre class="line-numbers language-bash"><code class="language-bash">spoon.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在连接管理仓库时<strong>白屏异常</strong></p><blockquote><p>WARNING:  no libwebkitgtk-1.0 detected, some features will be unavailable<br>   Consider installing the package with apt-get or yum.<br>   e.g. ‘sudo apt-get install libwebkitgtk-1.0-0’</p></blockquote><p>缺少 <code>webkitgtk</code> （无法完成页面渲染，so，白屏），警告提示我们 <code>sudo apt-get install libwebkitgtk-1.0-0</code> 来安装。 But,这是 debian 、 Ubuntu 常用包安装方式。 CentOS 可以这样：</p><pre class="line-numbers language-bash"><code class="language-bash">yum <span class="token function">install</span> epel-release<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash"><code class="language-bash">yum <span class="token function">install</span> webkitgtk<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其中，<code>epel</code> 是个安装软件包的好东西，可以去了解一下。</p><blockquote><p>Windows 下 的页面渲染调用的是系统自带的 IE 。</p></blockquote><p><a href="https://unix.stackexchange.com/questions/182603/how-to-install-webkitgtk1-on-rhel7" target="_blank" rel="noopener">from</a></p>]]></content>
      
      
        <tags>
            
            <tag> Kettle </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hadoop1.2.1集群搭建</title>
      <link href="/2017/08/18/Hadoop1-2-1%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/"/>
      <url>/2017/08/18/Hadoop1-2-1%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/</url>
      <content type="html"><![CDATA[<p>[toc]</p><h1 id="hadoop1-2-1集群搭建"><a href="#hadoop1-2-1集群搭建" class="headerlink" title="hadoop1.2.1集群搭建"></a>hadoop1.2.1集群搭建</h1><blockquote><p>环境：虚拟机：VM12（win10）操作系统：CentOS7（最小安装）</p></blockquote><h2 id="1-IP与主机名："><a href="#1-IP与主机名：" class="headerlink" title="1.IP与主机名："></a>1.IP与主机名：</h2><blockquote><p>方便远程ssh工具登录</p></blockquote><ul><li>配置静态IP</li></ul><p>查看现有网络配置</p><pre><code>[root@nick ~]# ifconfig ens33: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500        inet 192.168.1.203  netmask 255.255.255.0  broadcast 192.168.1.255        inet6 fe80::c472:73c0:1189:2edf  prefixlen 64  scopeid 0x20&lt;link&gt;        ether 00:0c:29:ac:04:6d  txqueuelen 1000  (Ethernet)        RX packets 178665  bytes 31856422 (30.3 MiB)        RX errors 0  dropped 0  overruns 0  frame 0        TX packets 75340  bytes 16564447 (15.7 MiB)        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0lo: flags=73&lt;UP,LOOPBACK,RUNNING&gt;  mtu 65536        inet 127.0.0.1  netmask 255.0.0.0        inet6 ::1  prefixlen 128  scopeid 0x10&lt;host&gt;        loop  txqueuelen 1  (Local Loopback)        RX packets 97995  bytes 24766840 (23.6 MiB)        RX errors 0  dropped 0  overruns 0  frame 0        TX packets 97995  bytes 24766840 (23.6 MiB)        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0virbr0: flags=4099&lt;UP,BROADCAST,MULTICAST&gt;  mtu 1500        inet 192.168.122.1  netmask 255.255.255.0  broadcast 192.168.122.255        ether 52:54:00:64:2a:07  txqueuelen 1000  (Ethernet)        RX packets 0  bytes 0 (0.0 B)        RX errors 0  dropped 0  overruns 0  frame 0        TX packets 0  bytes 0 (0.0 B)        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</code></pre><p><strong>ens33</strong> 为默认网卡，更改其配置文件（vi /etc/sysconfig/network-scripts/ifcfg-ens33）如下：</p><pre><code>[root@nick network-scripts]# cat ifcfg-ens33TYPE=EthernetBOOTPROTO=noneDEFROUTE=yesIPV4_FAILURE_FATAL=noIPV6INIT=yesIPV6_AUTOCONF=yesIPV6_DEFROUTE=yesIPV6_FAILURE_FATAL=noIPV6_ADDR_GEN_MODE=stable-privacyNAME=&quot; 局域网&quot;UUID=0d39ce5b-0cb0-434a-8dee-8783f9805112DEVICE=ens33ONBOOT=yesIPADDR=192.168.1.203PREFIX=24GATEWAY=192.168.1.1IPV6_PEERDNS=yesIPV6_PEERROUTES=yes</code></pre><blockquote><p>UUID 为唯一标识，不可重复，新建虚拟机会自动生成，克隆虚拟机此项重复，导致克隆机网络不通，解决方法<br>：删除UUID，在VM虚拟机网络配置高级选项中，重新生成mac地址,必须关闭虚拟机，再启动，新的mac才会生效，Done！</p></blockquote><p>重启网络</p><pre><code>systemctl restart network.service</code></pre><ul><li>关闭防火墙</li></ul><blockquote><p>防火墙会导致datanode 进程死亡！！！</p></blockquote><pre><code>systemctl stop firewalld.service --关闭防火墙systemctl disable firewalld.service --永久关闭</code></pre><ul><li>修改主机名</li></ul><blockquote><p>此目录 CentOS 7 下不同于CentOS 6</p></blockquote><pre><code>vi /etc/hostname</code></pre><blockquote><p>PS：CentOS 6 下？</p></blockquote><p>将默认的localhoat.domain全部修改为nick(自定义的新主机名)</p><ul><li>绑定主机名与ip</li></ul><pre><code>vi /etc/hosts192.168.1.202 long192.168.1.202 nick192.168.1.202 nick_1192.168.1.202 nick_2192.168.1.202 nick_3</code></pre><blockquote><p>PS：CentOS 6 下？</p></blockquote><p>其中，long为win主机，nick为主节点（masters），nick_1、nick_2、nick_3为三个次节点（slaves）</p><h2 id="2-安装JDK"><a href="#2-安装JDK" class="headerlink" title="2.安装JDK"></a>2.安装JDK</h2><ul><li><p>查看现有JDK</p><pre><code>java -version</code></pre><blockquote><p>CentOS 7 桌面版（或其他更高）自带openJDK，使用yum卸载方式，卸载全部</p></blockquote></li><li><p>解压</p></li><li>配置环境变量</li></ul><h2 id="3-配置hadoop1-2-1"><a href="#3-配置hadoop1-2-1" class="headerlink" title="3.配置hadoop1.2.1"></a>3.配置hadoop1.2.1</h2><ul><li>解压</li><li>配置环境变量</li><li><p>更改配置文件</p><ol><li>hadoop_1/conf/hadoop_env.sh</li></ol></li></ul><pre><code>```    #=============JAVA_HOME===================     export JAVA_HOME=/usr/app/jdk    #=========================================    #=============warning=====================    export HADOOP_HOME_WARN_SUPPRESS=1    #=========================================```2. </code></pre><h2 id="4-克隆虚拟机"><a href="#4-克隆虚拟机" class="headerlink" title="4.克隆虚拟机"></a>4.克隆虚拟机</h2><h2 id="5-ssh免密登录"><a href="#5-ssh免密登录" class="headerlink" title="5.ssh免密登录"></a>5.ssh免密登录</h2><blockquote><p>哪有我的密钥，我就可以直接登录哪</p></blockquote><pre><code>ssh-keygen -t rsacp ~/.ssh/id_rsa.pub ~/.ssh/authorized_keys</code></pre><p> 合并所有私钥authorized_keys</p><p> 即时生效，无需重启</p><blockquote><p> 免密登录 报错</p></blockquote><pre><code> ssh nick@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@    WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED!     @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@IT IS POSSIBLE THAT SOMEONE IS DOING SOMETHING NASTY!Someone could be eavesdropping on you right now (man-in-the-middle attack)!It is also possible that a host key has just been changed.The fingerprint for the ECDSA key sent by the remote host is32:f4:ee:a0:4c:01:29:d1:6c:29:7c:ca:2a:8c:8a:57.Please contact your system administrator.Add correct host key in /root/.ssh/known_hosts to get rid of this message.Offending ECDSA key in /root/.ssh/known_hosts:5ECDSA host key for nick has changed and you have requested strict checking.Host key verification failed.[root@nick_3 ~]# ssh nick_1Last login: Fri Mar 17 14:28:42 2017 from nick</code></pre><p>  对应删除 .ssh 目录下的 known_hosts 中的连接记录即可</p><h2 id="6-hadoop-格式化"><a href="#6-hadoop-格式化" class="headerlink" title="6.hadoop 格式化"></a>6.hadoop 格式化</h2><h2 id="7-启动"><a href="#7-启动" class="headerlink" title="7.启动"></a>7.启动</h2><pre><code>[root@nick ~]# start-all.shstarting namenode, logging to /usr/app/hadoop_1/libexec/../logs/hadoop-root-namenode-nick.outnick_2: starting datanode, logging to /usr/app/hadoop_1/libexec/../logs/hadoop-root-datanode-nick_2.outnick_1: starting datanode, logging to /usr/app/hadoop_1/libexec/../logs/hadoop-root-datanode-nick_1.outnick_3: starting datanode, logging to /usr/app/hadoop_1/libexec/../logs/hadoop-root-datanode-nick_3.outnick: starting secondarynamenode, logging to /usr/app/hadoop_1/libexec/../logs/hadoop-root-secondarynamenode-nick.outstarting jobtracker, logging to /usr/app/hadoop_1/libexec/../logs/hadoop-root-jobtracker-nick.outnick_1: starting tasktracker, logging to /usr/app/hadoop_1/libexec/../logs/hadoop-root-tasktracker-nick_1.outnick_2: starting tasktracker, logging to /usr/app/hadoop_1/libexec/../logs/hadoop-root-tasktracker-nick_2.outnick_3: starting tasktracker, logging to /usr/app/hadoop_1/libexec/../logs/hadoop-root-tasktracker-nick_3.out</code></pre><p>查看主节点进程</p><pre><code>[root@nick ~]# jps61327 JobTracker61426 Jps61093 NameNode61244 SecondaryNameNode</code></pre><p>查看各个节从节点进程</p><pre><code>[root@nick_1 ~]# jps3674 Jps3473 DataNode3551 TaskTracker</code></pre><h2 id="8-关闭"><a href="#8-关闭" class="headerlink" title="8.关闭"></a>8.关闭</h2><pre><code>[root@nick ~]# stop-all.shstopping jobtrackernick_1: stopping tasktrackernick_3: stopping tasktrackernick_2: stopping tasktrackerstopping namenodenick_1: stopping datanodenick_3: stopping datanodenick_2: stopping datanodenick: stopping secondarynamenode</code></pre>]]></content>
      
      
    </entry>
    
    <entry>
      <title>vps备忘</title>
      <link href="/2017/08/17/vps%E5%A4%87%E5%BF%98/"/>
      <url>/2017/08/17/vps%E5%A4%87%E5%BF%98/</url>
      <content type="html"><![CDATA[<p>##　关于URL redirect和URL frame的区别<br>这是两种不同的URL转发模式，第一种：URL redirect是直接转发，也就是你访问域名后转向后显示的是转向后的域名，也就是你从AURL转到B之后，显示的是B的域名。<br>第二种URL frame 就是隐藏转发，转发后显示的域名还是A域名！客户可以根据自己的需要使用相应的功能！</p><h2 id="ssh"><a href="#ssh" class="headerlink" title="ssh"></a>ssh</h2><p><code>ssh root@11.11.11.11 -p xxxx</code> -p 端口号</p><h2 id="防火墙与端口"><a href="#防火墙与端口" class="headerlink" title="防火墙与端口"></a>防火墙与端口</h2><p>ssr-go 版脚本开启了防火墙，手动打开ssh xxxx口、ng 80口、hexo 4000口，并<strong>重启</strong>防火墙生效。</p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>CentOS下7z与gcc配置备忘</title>
      <link href="/2017/08/14/CentOS%E4%B8%8B7z%E4%B8%8Egcc%E9%85%8D%E7%BD%AE%E5%A4%87%E5%BF%98/"/>
      <url>/2017/08/14/CentOS%E4%B8%8B7z%E4%B8%8Egcc%E9%85%8D%E7%BD%AE%E5%A4%87%E5%BF%98/</url>
      <content type="html"><![CDATA[<blockquote><p>未科学上网yum安装 报错<br>    No package p7zip available.</p></blockquote><blockquote><p>编译源码安装<br><code>make</code><br>报错<br>    make[1]: g++: Command not found<br>   make[1]: <strong><em> [myGetTickCount.o] Error 127<br>   make[1]: Leaving directory `/usr/app/p7zip_9.20.1/CPP/7zip/Bundles/Alone’<br>   make: </em></strong> [7za] Error 2</p></blockquote><p>安装gcc与g++</p><p><code>yum install gcc-c++</code></p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>搬瓦工各机房测速记录</title>
      <link href="/2017/08/11/%E6%90%AC%E7%93%A6%E5%B7%A5%E5%90%84%E6%9C%BA%E6%88%BF%E6%B5%8B%E9%80%9F%E8%AE%B0%E5%BD%95/"/>
      <url>/2017/08/11/%E6%90%AC%E7%93%A6%E5%B7%A5%E5%90%84%E6%9C%BA%E6%88%BF%E6%B5%8B%E9%80%9F%E8%AE%B0%E5%BD%95/</url>
      <content type="html"><![CDATA[<ul><li>Company(236网络)</li></ul><table><thead><tr><th>机房</th><th>速度</th><th>延迟</th></tr></thead><tbody><tr><td>洛杉矶</td><td>k</td><td>ms</td></tr></tbody></table><ul><li>Home</li></ul><table><thead><tr><th>机房</th><th>速度</th><th>延迟</th></tr></thead><tbody><tr><td>洛杉矶</td><td>k</td><td>ms</td></tr></tbody></table>]]></content>
      
      
    </entry>
    
    <entry>
      <title>图标一键风格化</title>
      <link href="/2017/08/11/%E5%9B%BE%E6%A0%87%E4%B8%80%E9%94%AE%E9%A3%8E%E6%A0%BC%E5%8C%96/"/>
      <url>/2017/08/11/%E5%9B%BE%E6%A0%87%E4%B8%80%E9%94%AE%E9%A3%8E%E6%A0%BC%E5%8C%96/</url>
      <content type="html"><![CDATA[<hr><p>TODO：</p><ul><li>Win10 开始屏幕 图标一键风格化</li></ul><hr>]]></content>
      
      
    </entry>
    
    <entry>
      <title>消息队列笔记</title>
      <link href="/2017/07/11/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E7%AC%94%E8%AE%B0/"/>
      <url>/2017/07/11/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<blockquote><p>阅读：</p><ol><li><p><a href="http://www.cnblogs.com/edisonchou/p/3825682.html" target="_blank" rel="noopener">NoSQL初探之人人都爱Redis：（3）使用Redis作为消息队列服务场景应用案例</a></p></li><li></li></ol></blockquote><p>todo</p><p><code>redis</code> 与 <code>kafka</code> 的比较：</p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>内外网共存的解决方案</title>
      <link href="/2017/07/08/%E5%86%85%E5%A4%96%E7%BD%91%E5%85%B1%E5%AD%98%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
      <url>/2017/07/08/%E5%86%85%E5%A4%96%E7%BD%91%E5%85%B1%E5%AD%98%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
      <content type="html"><![CDATA[<p>限定不同的网段走不同的网关。</p><pre class="line-numbers language-bash"><code class="language-bash">route delete 0.0.0.0route add 0.0.0.0 mask 0.0.0.0 192.168.43.1 <span class="token comment" spellcheck="true">#默认都走外网</span>route add 192.168.1.0 mask 255.255.255.0 192.168.1.1 <span class="token comment" spellcheck="true">#网段 1 走内网</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
        <tags>
            
            <tag> 配置 </tag>
            
            <tag> 网络 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python脚本实现SS密码自动更新</title>
      <link href="/2017/07/07/Python%E8%84%9A%E6%9C%AC%E5%AE%9E%E7%8E%B0SS%E5%AF%86%E7%A0%81%E8%87%AA%E5%8A%A8%E6%9B%B4%E6%96%B0/"/>
      <url>/2017/07/07/Python%E8%84%9A%E6%9C%AC%E5%AE%9E%E7%8E%B0SS%E5%AF%86%E7%A0%81%E8%87%AA%E5%8A%A8%E6%9B%B4%E6%96%B0/</url>
      <content type="html"><![CDATA[<p>mycmd下新建ss.bat</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 更新密码</span>ssr/ss.py<span class="token comment" spellcheck="true"># 启动 SS</span>ssr/ss.exe<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>CodeBak</p><p>File:<code>ss.py</code></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> zbar<span class="token keyword">from</span> PIL <span class="token keyword">import</span> Image<span class="token keyword">import</span> urllib<span class="token keyword">import</span> cStringIO<span class="token keyword">import</span> base64<span class="token keyword">import</span> sys<span class="token punctuation">,</span>osURL <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'http://freess.org/images/servers/jp03.png'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># create a reader</span>scanner <span class="token operator">=</span> zbar<span class="token punctuation">.</span>ImageScanner<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># configure the reader</span>scanner<span class="token punctuation">.</span>parse_config<span class="token punctuation">(</span><span class="token string">'enable'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># obtain image data</span>imgfile <span class="token operator">=</span> cStringIO<span class="token punctuation">.</span>StringIO<span class="token punctuation">(</span>urllib<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span>URL<span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>pil <span class="token operator">=</span> Image<span class="token punctuation">.</span>open<span class="token punctuation">(</span>imgfile<span class="token punctuation">)</span><span class="token punctuation">.</span>convert<span class="token punctuation">(</span><span class="token string">'L'</span><span class="token punctuation">)</span>width<span class="token punctuation">,</span> height <span class="token operator">=</span> pil<span class="token punctuation">.</span>sizeraw <span class="token operator">=</span> pil<span class="token punctuation">.</span>tostring<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># wrap image data</span>image <span class="token operator">=</span> zbar<span class="token punctuation">.</span>Image<span class="token punctuation">(</span>width<span class="token punctuation">,</span> height<span class="token punctuation">,</span> <span class="token string">'Y800'</span><span class="token punctuation">,</span> raw<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># scan the image for barcodes</span>scanner<span class="token punctuation">.</span>scan<span class="token punctuation">(</span>image<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># extract results</span><span class="token keyword">for</span> symbol <span class="token keyword">in</span> image<span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># do something useful with results</span>    <span class="token comment" spellcheck="true"># print 'decoded', symbol.type, 'symbol', '"%s"' % symbol.data</span>    pwd <span class="token operator">=</span> base64<span class="token punctuation">.</span>b64decode<span class="token punctuation">(</span>symbol<span class="token punctuation">.</span>data<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># with open('p1.txt', 'w') as f:</span>    <span class="token comment" spellcheck="true">#     f.write(pwd)</span>f<span class="token operator">=</span>open<span class="token punctuation">(</span><span class="token string">'D:\\green\\ShadowsocksR\\gui-config.json'</span><span class="token punctuation">,</span><span class="token string">'r+'</span><span class="token punctuation">)</span>flist<span class="token operator">=</span>f<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span>flist<span class="token punctuation">[</span><span class="token number">25</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'          \"password\" : \"'</span><span class="token operator">+</span>pwd<span class="token operator">+</span><span class="token string">'\",\n'</span>f<span class="token operator">=</span>open<span class="token punctuation">(</span><span class="token string">'D:\\green\\ShadowsocksR\\gui-config.json'</span><span class="token punctuation">,</span><span class="token string">'w+'</span><span class="token punctuation">)</span>f<span class="token punctuation">.</span>writelines<span class="token punctuation">(</span>flist<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># clean up</span><span class="token keyword">del</span><span class="token punctuation">(</span>image<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python库的安装</title>
      <link href="/2017/07/07/Python%E5%BA%93%E7%9A%84%E5%AE%89%E8%A3%85/"/>
      <url>/2017/07/07/Python%E5%BA%93%E7%9A%84%E5%AE%89%E8%A3%85/</url>
      <content type="html"><![CDATA[<h2 id="以chardet库安装为例"><a href="#以chardet库安装为例" class="headerlink" title="以chardet库安装为例"></a>以chardet库安装为例</h2><ol><li><a href="https://pypi.python.org/pypi/chardet" target="_blank" rel="noopener">下载库文件</a>;</li><li>解压至Python安装目录下的<code>Python27\Lib\site-packages</code>;</li><li>进入 chardet 目录，执行以下命令<code>python setup.py install</code></li></ol><pre class="line-numbers language-bash"><code class="language-bash">Installed d:\program files <span class="token punctuation">(</span>x86<span class="token punctuation">)</span>\python27\lib\site-packages\chardet-3.0.4-py2.7.eggProcessing dependencies <span class="token keyword">for</span> chardet<span class="token operator">==</span>3.0.4Finished processing dependencies <span class="token keyword">for</span> chardet<span class="token operator">==</span>3.0.4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 配置 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Yarn与Zookeeper</title>
      <link href="/2017/07/03/Yarn%E4%B8%8EZookeeper/"/>
      <url>/2017/07/03/Yarn%E4%B8%8EZookeeper/</url>
      <content type="html"><![CDATA[<p>记录比较<code>Yarn</code>与<code>Zookeeper</code>在集群资源管理中的作用与区别。</p><h2 id="二者的角色比较"><a href="#二者的角色比较" class="headerlink" title="二者的角色比较"></a>二者的角色比较</h2><ul><li><code>YARN</code>相当于政府，负责管理机器资源的分配;</li><li><code>Zookeeper</code>相当于立法委员会,负责保持信息的一致。</li></ul><p><a href="https://zhihu.com/question/41254423/answer/90409594" target="_blank" rel="noopener">文</a></p><blockquote><p><code>YARN</code>相当于政府，负责管理机器资源的分配，有困难找政府，政府安排人力物力来解决你的问题。这个才是你说的管理节点。</p></blockquote><blockquote><p><code>Zookeeper</code>相当于立法委员会，目标是提供权威的信息给这个国家所有的人。<code>Zookeeper</code>关注的主要是信息的一致性，管理一些需要在所有人心中保持一致的信息。它虽然常常用来管理哪个节点活着，哪个节点死了这种信息，或是哪个节点该负责什么事儿，但是它还是主要负责管理信息（档案，法律）的部门，不是民生部门……</p></blockquote>]]></content>
      
      
        <tags>
            
            <tag> Yarn </tag>
            
            <tag> Zookeeper </tag>
            
            <tag> 资源调度 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>数据库学习笔记</title>
      <link href="/2017/06/29/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2017/06/29/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<h2 id="Oracle"><a href="#Oracle" class="headerlink" title="Oracle"></a>Oracle</h2><p><strong>数据库</strong>就是柜子，柜子中的抽屉就是<strong>表空间</strong>，抽屉中的文件夹就是<strong>数据文件</strong>，文件夹中的纸就是<strong>表</strong>，写在纸上的字就是<strong>数据</strong>。</p><h3 id="别名"><a href="#别名" class="headerlink" title="别名"></a>别名</h3><p>别名默认的可以不写as关键字，除了<strong>数字</strong>必须用双引号括起来，其余的使不使用双引号均可。<br>Oracle中英文别名不加双引号时默认全部大写，存在小写时，需要加双引号。</p><h3 id="distinct"><a href="#distinct" class="headerlink" title="distinct"></a>distinct</h3><h3 id="order-by"><a href="#order-by" class="headerlink" title="order by"></a>order by</h3><p>order by在排序的时候，系统会默认的将空值标注为最大，此时可以通过where条件过滤掉空值，也可以通过nulls last和nulls first来处理。</p><h3 id="in-和-between……and"><a href="#in-和-between……and" class="headerlink" title="in 和 between……and"></a>in 和 between……and</h3><h3 id="空值处理"><a href="#空值处理" class="headerlink" title="空值处理"></a>空值处理</h3><p>因为空值与任何值进行运算的结果都为空，所以在实际运用中经常需要进行空值处理，空值处理用nvl函数，查询空值用is null，查询非空记录用is not null</p><h3 id="模糊查询"><a href="#模糊查询" class="headerlink" title="模糊查询"></a>模糊查询</h3><p>模糊查询用like，其中下划线表示一个字符，百分号表示若干字符</p><blockquote><p>PLSQL保存的 .sql 文件 Navicat中文乱码</p></blockquote><pre><code>更改PLSQL编码格式设置（工具-首选项-文件-格式-Encoding ）为 ”alway utf-8“ </code></pre><p>select substr(‘oracle’,-3,3) from dual;</p><h3 id="字符函数"><a href="#字符函数" class="headerlink" title="字符函数"></a>字符函数</h3><ul><li>大小写转换用关键字<code>upper</code>和<code>lower</code>：</li></ul><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> upper<span class="token punctuation">(</span><span class="token string">'oracle'</span><span class="token punctuation">)</span> <span class="token keyword">from</span> dual<span class="token punctuation">;</span><span class="token keyword">select</span> lower<span class="token punctuation">(</span>ename<span class="token punctuation">)</span><span class="token punctuation">,</span>sal<span class="token punctuation">,</span>comm <span class="token keyword">from</span> EMP <span class="token keyword">where</span> comm <span class="token operator">is</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>联接字符串用 <code>concat</code> ，<code>concat</code>只有两个参数，也就是说只能关联两个字符串，当需要关联很多字符串时用 <code>||</code>：</li></ul><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> concat<span class="token punctuation">(</span><span class="token string">'oracle'</span><span class="token punctuation">,</span><span class="token string">'mysql'</span><span class="token punctuation">)</span> <span class="token keyword">from</span> dual<span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token string">'oracle'</span><span class="token operator">||</span><span class="token string">'mysql'</span><span class="token operator">||</span><span class="token string">'db2'</span> <span class="token keyword">from</span> dual<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>截取字符串用<code>substr</code>，对于<code>substr</code>，从1开始与从0开始截取结果是一样的，负数表示从倒数第几个字符开始截取字符串：</li></ul><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> substr<span class="token punctuation">(</span><span class="token string">'oracle'</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">from</span> dual<span class="token punctuation">;</span><span class="token comment" spellcheck="true">--后三位</span><span class="token keyword">select</span> substr<span class="token punctuation">(</span><span class="token string">'oracle'</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token keyword">from</span> dual<span class="token punctuation">;</span><span class="token keyword">select</span> substr<span class="token punctuation">(</span>ename<span class="token punctuation">,</span>length<span class="token punctuation">(</span>ename<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">from</span> emp<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>求字符串长度用<code>length</code>关键字：</li></ul><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> ename<span class="token punctuation">,</span>length<span class="token punctuation">(</span>ename<span class="token punctuation">)</span> <span class="token keyword">from</span> emp<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>串替换用<code>replace</code>：</li></ul><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> replace<span class="token punctuation">(</span><span class="token string">'hello datang'</span><span class="token punctuation">,</span><span class="token string">'datang'</span><span class="token punctuation">,</span><span class="token string">'zhixin'</span><span class="token punctuation">)</span> <span class="token keyword">from</span> dual<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>串替字符串中的空格：</li></ul><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> replace<span class="token punctuation">(</span><span class="token string">'hello da tang'</span><span class="token punctuation">,</span><span class="token string">' '</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">)</span> <span class="token keyword">from</span> dual<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>ASCII码的转换：</li></ul><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> ASCII<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span> <span class="token keyword">from</span> dual<span class="token punctuation">;</span><span class="token keyword">select</span> chr<span class="token punctuation">(</span><span class="token number">97</span><span class="token punctuation">)</span><span class="token keyword">from</span> dual<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li><code>trim</code>的用法：</li></ul><blockquote><p>trim主要用来消除目标字符串左边或者右边的连续字符或者空格，例如：</p></blockquote><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> trim<span class="token punctuation">(</span>both <span class="token string">'x'</span> <span class="token keyword">from</span> <span class="token string">'xxxxscottxxxx'</span><span class="token punctuation">)</span><span class="token keyword">from</span> dual<span class="token punctuation">;</span>   <span class="token keyword">select</span> ltrim<span class="token punctuation">(</span><span class="token string">'xxxxscottxxxx'</span><span class="token punctuation">,</span><span class="token string">'x'</span><span class="token punctuation">)</span><span class="token keyword">from</span> dual<span class="token punctuation">;</span><span class="token keyword">select</span> rtrim<span class="token punctuation">(</span><span class="token string">'xxxxscottxxxx'</span><span class="token punctuation">,</span><span class="token string">'x'</span><span class="token punctuation">)</span><span class="token keyword">from</span> dual<span class="token punctuation">;</span><span class="token keyword">select</span> trim<span class="token punctuation">(</span><span class="token string">'   scott   '</span><span class="token punctuation">)</span><span class="token keyword">from</span> dual<span class="token punctuation">;</span><span class="token keyword">select</span> ltrim<span class="token punctuation">(</span><span class="token string">'   scott   '</span><span class="token punctuation">)</span><span class="token keyword">from</span> dual<span class="token punctuation">;</span><span class="token keyword">select</span> rtrim<span class="token punctuation">(</span><span class="token string">'   scott   '</span><span class="token punctuation">)</span><span class="token keyword">from</span> dual<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>lpad/rpad </p><blockquote><p>主要用来在目标字符串的左边或者右边添加字符串：</p></blockquote><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> lpad<span class="token punctuation">(</span><span class="token string">'dasfs'</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">'o'</span><span class="token punctuation">)</span><span class="token keyword">from</span> dual<span class="token punctuation">;</span><span class="token keyword">select</span> rpad<span class="token punctuation">(</span><span class="token string">'dasfs'</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token string">'x'</span><span class="token punctuation">)</span><span class="token keyword">from</span> dual<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">--13为添加之后的总长度</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="数值函数"><a href="#数值函数" class="headerlink" title="数值函数"></a>数值函数</h2><ul><li>round</li></ul><blockquote><p>四舍五入用<code>round</code>，可以指定保留小数位数，也可以对整数四舍五入（round也可以用于对日期的舍入）：</p></blockquote><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token function">round</span><span class="token punctuation">(</span><span class="token number">35746.57</span><span class="token punctuation">)</span> <span class="token keyword">from</span> dual<span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token function">round</span><span class="token punctuation">(</span><span class="token number">35746.57</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">from</span> dual<span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token function">round</span><span class="token punctuation">(</span><span class="token number">35746.57</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">from</span> dual<span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token function">round</span><span class="token punctuation">(</span><span class="token number">1994</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">from</span> dual<span class="token punctuation">;</span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span>   <span class="token function">round</span><span class="token punctuation">(</span>TO_DATE<span class="token punctuation">(</span><span class="token string">'2008-11-28 12:59:59'</span><span class="token punctuation">,</span><span class="token string">'YYYY-MM-DD hh24:mi:ss'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'MM'</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span>   DUAL<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><p>trunc</p><blockquote><p>截断小数位用<code>trunc</code>，也可以截断整数：</p></blockquote></li></ul><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> trunc<span class="token punctuation">(</span><span class="token number">35746.57</span><span class="token punctuation">)</span> <span class="token keyword">from</span> dual<span class="token punctuation">;</span><span class="token keyword">select</span> trunc<span class="token punctuation">(</span><span class="token number">35746.57</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">from</span> dual<span class="token punctuation">;</span><span class="token keyword">select</span> trunc<span class="token punctuation">(</span><span class="token number">35746.57</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">from</span> dual<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>得到最当前日期的所在月份的第一天</li></ul><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span>   TRUNC<span class="token punctuation">(</span>TO_DATE<span class="token punctuation">(</span><span class="token string">'2008-11-28 12:59:59'</span><span class="token punctuation">,</span><span class="token string">'YYYY-MM-DD hh24:mi:ss'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'MM'</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span>   DUAL<span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>取余用关键字mod：</li></ul><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> mod<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token keyword">from</span> dual<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="日期函数"><a href="#日期函数" class="headerlink" title="日期函数"></a>日期函数</h2><ul><li>查看当前系统时间用<code>sysdate</code>：</li></ul><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> sysdate <span class="token keyword">from</span> dual<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>求两个时间段之间的月份数用<code>months_between</code>：</li></ul><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> months_between<span class="token punctuation">(</span>sysdate<span class="token punctuation">,</span>hiredate<span class="token punctuation">)</span><span class="token keyword">from</span> emp<span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token string">"ROUND"</span><span class="token punctuation">(</span>months_between<span class="token punctuation">(</span>sysdate<span class="token punctuation">,</span>hiredate<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">from</span> emp<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li><code>NEXT_DAY</code>表示参考日期之后的某一个指定日期第一次出现的日期如：</li></ul><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> next_day<span class="token punctuation">(</span>sysdate<span class="token punctuation">,</span><span class="token string">'星期一'</span><span class="token punctuation">)</span><span class="token keyword">from</span> dual<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">-- PL/SQL 和 SQLPLUS 可用</span><span class="token keyword">select</span> next_day<span class="token punctuation">(</span>sysdate<span class="token punctuation">,</span><span class="token string">'mon'</span><span class="token punctuation">)</span><span class="token keyword">from</span> dual<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">-- Navicat可用</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="强制转换函数"><a href="#强制转换函数" class="headerlink" title="强制转换函数"></a>强制转换函数</h2><ul><li><code>char</code>和<code>varchar2</code>的区别</li></ul><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token string">"SCOTT"</span><span class="token punctuation">.</span>test <span class="token punctuation">(</span><span class="token string">"id"</span> CHAR<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"name"</span> VARCHAR2<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token string">"TEST"</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token string">"TEST"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">-- char自动补全空格</span><span class="token keyword">SELECT</span> length<span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>length<span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> <span class="token string">"TEST"</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">--char 10</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>数据类型的特点<br><code>date/number</code>:都有固定的格式，number的格式要求不能以0开头<br><code>char/varchar2</code>:均表示字符型，字符型没有格式<br>              char 是定长的,varchar2 是变长</p><p><code>blob</code> 大对象类型，表示以二进制的形式存储大对象<br><code>clob</code> 大对象类型，表示以文本的形式存储大对象</p><ul><li><code>to_char</code></li></ul><p>字符型的特点是没有格式限制，而日期型、数值型都有固定的格式限制，所以在实际应用中，<br>经常需要将其他一些类型的数据转化为字符型，好进行一些原本无法进行的操作：</p><p>1.日期型转化为字符型：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> to_char<span class="token punctuation">(</span>sysdate<span class="token punctuation">,</span> <span class="token string">'fmyyyy-mm-dd-dy-q'</span><span class="token punctuation">)</span> <span class="token keyword">from</span> dual<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">--fm    2017-7-1-星期六-3</span><span class="token keyword">select</span> to_char<span class="token punctuation">(</span>sysdate<span class="token punctuation">,</span> <span class="token string">'yyyy-mm-dd-dy-q'</span><span class="token punctuation">)</span> <span class="token keyword">from</span> dual<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">--无fm   2017-07-01-星期六-3</span><span class="token comment" spellcheck="true">-- -q 是什么？</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>2.数值型转化为字符型：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> to_char<span class="token punctuation">(</span>sal<span class="token punctuation">,</span><span class="token string">'$99,999'</span><span class="token punctuation">)</span><span class="token keyword">from</span> emp<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span>    TO_CHAR <span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">,</span> <span class="token string">'$99,999'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">-- "TO_CHAR"(x) 结果前 一个空格，'$99,999'长度不够，$前面再加空格</span><span class="token keyword">FROM</span>    <span class="token string">"TEST"</span><span class="token punctuation">;</span><span class="token keyword">select</span> to_char<span class="token punctuation">(</span><span class="token number">1234</span><span class="token punctuation">,</span><span class="token string">'$99,999'</span><span class="token punctuation">)</span><span class="token keyword">from</span> dual<span class="token punctuation">;</span><span class="token keyword">select</span> to_char<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'0000'</span><span class="token punctuation">)</span><span class="token keyword">from</span> dual<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">--结果 前面加0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>to_date 与 to_number<br>数据库默认的日期型的输入方式为：08-8月 -08<br>这样的输入方式很不方便，实际工作中，一般通过to_date函数将字符串转换为日期型来输出输入日期型数据，譬如：</li></ul><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> to_date<span class="token punctuation">(</span><span class="token string">'2009-09-23'</span><span class="token punctuation">,</span><span class="token string">'yyyy-mm-dd'</span><span class="token punctuation">)</span> <span class="token keyword">from</span> dual<span class="token punctuation">;</span><span class="token keyword">select</span> TO_NUMBER<span class="token punctuation">(</span><span class="token string">'100.00'</span><span class="token punctuation">,</span> <span class="token string">'9G999D99'</span><span class="token punctuation">)</span> <span class="token keyword">from</span> dual<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>to_number</p><ul><li>or 与 union 、union all的异同点：</li></ul><p>三者都表示 对结果 并运算（合并） ，在考虑数据库查询优化的时候，我们一般建议用union替代or，两者的运行结果是完全一样的。<br>union与union all的区别是：union自动去除重复记录，union all保存重复记录，如：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> ename <span class="token keyword">from</span> emp <span class="token keyword">where</span> sal <span class="token operator">></span><span class="token number">2000</span> <span class="token operator">or</span> comm <span class="token operator">is</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">;</span><span class="token keyword">select</span> ename <span class="token keyword">from</span> emp <span class="token keyword">where</span> sal<span class="token operator">></span><span class="token number">2000</span>   <span class="token keyword">union</span>  <span class="token keyword">select</span> ename <span class="token keyword">from</span> emp <span class="token keyword">where</span> comm <span class="token operator">is</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">;</span><span class="token keyword">select</span> ename <span class="token keyword">from</span> emp <span class="token keyword">where</span> sal<span class="token operator">></span><span class="token number">2000</span>   <span class="token keyword">union</span> <span class="token keyword">all</span> <span class="token keyword">select</span> ename <span class="token keyword">from</span> emp <span class="token keyword">where</span> comm <span class="token operator">is</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://sites.google.com/site/iridiumsite/it/database/the-difference-among-or-union-and-union-all" target="_blank" rel="noopener">文</a></p><ul><li>and 与 intersect的用法说明：两者都表示交集，运行的结果完全一样</li></ul><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> ename <span class="token keyword">from</span> emp <span class="token keyword">where</span> sal <span class="token operator">></span><span class="token number">2000</span> <span class="token operator">and</span> comm <span class="token operator">is</span> <span class="token boolean">null</span><span class="token punctuation">;</span> <span class="token keyword">select</span> ename <span class="token keyword">from</span> emp <span class="token keyword">where</span> sal<span class="token operator">></span><span class="token number">2000</span>    <span class="token keyword">intersect</span>  <span class="token keyword">select</span> ename <span class="token keyword">from</span> emp <span class="token keyword">where</span> comm <span class="token operator">is</span> <span class="token boolean">null</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>布尔操作符的优先顺序为：not、and、or，看下面例子并分析执行结果：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> job<span class="token operator">=</span><span class="token string">'SALESMAN'</span> <span class="token operator">or</span> job<span class="token operator">=</span><span class="token string">'CLERK'</span> <span class="token operator">and</span> comm <span class="token operator">is</span> <span class="token boolean">null</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>分组</li></ul><p>在数据查询处理过程中，经常会出现以某一个属性为标准进行分组统计的情况，<br>分组用group by，分组查询一般是伴随着列函数一起出现的，<br>常用的列函数有：sum、count、max、min、avg等等，<br>分组的原则是：不在列函数中的列，<strong>必须全出现在group by 之后</strong>。<br>分组的语法格式：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token keyword">FROM</span><span class="token keyword">WHERE</span><span class="token keyword">GROUP</span> <span class="token keyword">BY</span><span class="token keyword">ORDER</span> <span class="token keyword">BY</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>分组只能用于 select 语句，having 伴随 group by 一起出现，<br>但是顺序可以互换， group by 或者 having 必须在 where 子句之后，<br>order by 永远在语句的最后。</p><p>SUM 求和<br>假如需要求每个部门的员工工资和，如何写SQL语句？<br>求总的工资和大家都会，要求每个部门的工资和，只需要按部门分组即可：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span>    <span class="token function">SUM</span> <span class="token punctuation">(</span>sal<span class="token punctuation">)</span><span class="token punctuation">,</span>    deptno<span class="token keyword">FROM</span>    emp<span class="token keyword">GROUP</span> <span class="token keyword">BY</span>    deptno<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>COUNT 求总数<br>对于count函数，永远不会返回null值，如果列中没有值，至少也会返回0值，同时聚集函数中也可以使用all和distinct，例如：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span>    <span class="token function">COUNT</span> <span class="token punctuation">(</span><span class="token keyword">DISTINCT</span> JOB<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">COUNT</span> <span class="token punctuation">(</span><span class="token keyword">ALL</span> JOB<span class="token punctuation">)</span><span class="token keyword">FROM</span>    emp<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>AVG 求平均数<br>前面学习中我们知道限定条件用where，如果要限定列函数的条件用什么呢？<br>这里大家需要注意，对于列函数的限制用having，而非where，例如求各个部门的平均工资、员工人数，<br>要求输出平均工资大于2000的部门，结果按平均工资降序排序，如下：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span>    <span class="token function">COUNT</span> <span class="token punctuation">(</span>empno<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">AVG</span> <span class="token punctuation">(</span>sal<span class="token punctuation">)</span><span class="token punctuation">,</span>    deptno<span class="token keyword">FROM</span>    emp<span class="token keyword">GROUP</span> <span class="token keyword">BY</span>    deptno<span class="token keyword">HAVING</span>    <span class="token function">AVG</span> <span class="token punctuation">(</span>sal<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">2000</span><span class="token keyword">ORDER</span> <span class="token keyword">BY</span>    <span class="token function">AVG</span> <span class="token punctuation">(</span>sal<span class="token punctuation">)</span> <span class="token keyword">DESC</span><span class="token punctuation">;</span>MAX、MIN求最大值最小值<span class="token keyword">SELECT</span>    <span class="token function">MAX</span> <span class="token punctuation">(</span>sal<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">MIN</span> <span class="token punctuation">(</span>sal<span class="token punctuation">)</span><span class="token keyword">FROM</span>    emp<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>多表查询</li></ul><p>联接查询这一块主要知识点包括 自联接、外联接和内联接，以及SQL1999对查询的支持。<br>基本的联接查询语法格式是：</p><pre class="line-numbers language-sql"><code class="language-sql">             <span class="token keyword">SELECT</span> 别名<span class="token number">1</span><span class="token punctuation">.</span>colmun<span class="token punctuation">,</span>                    别名<span class="token number">2</span><span class="token punctuation">.</span>colmun               <span class="token keyword">FROM</span> table1 别名<span class="token number">1</span><span class="token punctuation">,</span>                   table2 别名<span class="token number">2</span>              <span class="token keyword">WHERE</span> 别名<span class="token number">1</span><span class="token punctuation">.</span>colmun1<span class="token operator">=</span>别名<span class="token number">2</span><span class="token punctuation">.</span>colmun2<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中<br>别名1.colmun表示要从第一张表中检索的数据列，<br>别名2.colmun表示要从第二表中检索的数据列，<br>别名1.colmun1表示指定的colmun1来自表table1中，<br>别名2.colmun2表示指定的colmun2来自表table2中。</p><p>联接查询应遵循一些规则：</p><p>1、表明限定。</p><p>2、联接查询的表可以是两个或两个以上。<strong>使用表名限定列名，可以增强数据检索的效率</strong>。</p><p>3、如果相同的列名出现在多个表中，必须使用表名限定。</p><p>例如：</p><pre class="line-numbers language-sql"><code class="language-sql">      <span class="token keyword">select</span> <span class="token number">a</span><span class="token punctuation">.</span>ename<span class="token punctuation">,</span> <span class="token number">a</span><span class="token punctuation">.</span>sal<span class="token punctuation">,</span> <span class="token number">b</span><span class="token punctuation">.</span>dname          <span class="token keyword">from</span> emp <span class="token number">a</span><span class="token punctuation">,</span> dept <span class="token number">b</span>         <span class="token keyword">where</span> <span class="token number">a</span><span class="token punctuation">.</span>deptno <span class="token operator">=</span> <span class="token number">b</span><span class="token punctuation">.</span>deptno<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>内联接</p><p>所谓内联接，就是当且仅当所有被联接的表中都存在匹配的行时，<br>才将两个或者多个表中的行进行关联，内联接保证了两个表中所有的行都满足联接条件，<br>但却丢失了一些不满足联接条件的数据。工作中用的最多的联接查询就是内联接。</p><p>例如查询员工的姓名、编号、部门编号、部门名称：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token number">e</span><span class="token punctuation">.</span>ename<span class="token punctuation">,</span> <span class="token number">e</span><span class="token punctuation">.</span>empno<span class="token punctuation">,</span> <span class="token number">e</span><span class="token punctuation">.</span>deptno<span class="token punctuation">,</span> <span class="token number">d</span><span class="token punctuation">.</span>dname  <span class="token keyword">from</span> emp <span class="token number">e</span><span class="token punctuation">,</span> dept <span class="token number">d</span> <span class="token keyword">where</span> <span class="token number">e</span><span class="token punctuation">.</span>deptno <span class="token operator">=</span> <span class="token number">d</span><span class="token punctuation">.</span>deptno <span class="token operator">and</span> <span class="token number">d</span><span class="token punctuation">.</span>dname<span class="token operator">=</span><span class="token string">'SALES'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>或者</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token number">e</span><span class="token punctuation">.</span>ename<span class="token punctuation">,</span> <span class="token number">e</span><span class="token punctuation">.</span>empno<span class="token punctuation">,</span> <span class="token number">e</span><span class="token punctuation">.</span>deptno<span class="token punctuation">,</span> <span class="token number">d</span><span class="token punctuation">.</span>dname  <span class="token keyword">from</span> emp <span class="token number">e</span> <span class="token keyword">inner</span> <span class="token keyword">join</span> dept <span class="token number">d</span> <span class="token keyword">on</span> <span class="token number">e</span><span class="token punctuation">.</span>deptno <span class="token operator">=</span> <span class="token number">d</span><span class="token punctuation">.</span>deptno <span class="token operator">and</span> dname<span class="token operator">=</span><span class="token string">'SALES'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>或者</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token number">e</span><span class="token punctuation">.</span>ename<span class="token punctuation">,</span> <span class="token number">e</span><span class="token punctuation">.</span>empno<span class="token punctuation">,</span> <span class="token number">e</span><span class="token punctuation">.</span>deptno<span class="token punctuation">,</span> <span class="token number">d</span><span class="token punctuation">.</span>dname  <span class="token keyword">from</span> emp <span class="token number">e</span> joindept <span class="token number">d</span> <span class="token keyword">on</span> <span class="token number">e</span><span class="token punctuation">.</span>deptno <span class="token operator">=</span> <span class="token number">d</span><span class="token punctuation">.</span>deptno  <span class="token keyword">where</span> dname<span class="token operator">=</span><span class="token string">'SALES'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>外联接</p><p>如果想只限定一个表的条件而不限定另外一个表的条件（换句话说，如果存在于一个表中的数据在另一个表没有匹配的值，未能匹配的行仍然包含在输出结果中），就需要使用外联接，外联接只能用于两张表的联接，包括左外联接和右外联接，用(+)表示，格式如下：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span>别名<span class="token number">1</span><span class="token punctuation">.</span>colmun<span class="token punctuation">,</span>别名<span class="token number">2</span><span class="token punctuation">.</span>colmun <span class="token keyword">FROM</span> table1 别名<span class="token number">1</span><span class="token punctuation">,</span> table2 别名<span class="token number">2</span> <span class="token keyword">WHERE</span> 别名<span class="token number">1</span><span class="token punctuation">.</span>colmun1<span class="token punctuation">(</span><span class="token operator">+</span><span class="token punctuation">)</span><span class="token operator">=</span>别名<span class="token number">2</span><span class="token punctuation">.</span>colmun2<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span>别名<span class="token number">1</span><span class="token punctuation">.</span>colmun<span class="token punctuation">,</span>别名<span class="token number">2</span><span class="token punctuation">.</span>colmun <span class="token keyword">FROM</span> table1 别名<span class="token number">1</span><span class="token punctuation">,</span> table2 别名<span class="token number">2</span> <span class="token keyword">WHERE</span>别名<span class="token number">1</span><span class="token punctuation">.</span>colmun1<span class="token operator">=</span>别名<span class="token number">2</span><span class="token punctuation">.</span>colmun2<span class="token punctuation">(</span><span class="token operator">+</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>对于外联接，（+）在左边表示右外联接，显示出右边表中存在而左边表不存在的数据。</p><p>自联接</p><p>自联接就是把某一张表中的行同该表中另外一些行联接起来。自联接主要用于查询比较相同的信息，所比较的列必须有相同的或兼容的数据类型。自联接是一种特殊的内联接。</p><p>为了联接同一个表，需要为该表指定两个不同的别名，只有这样才能把该表逻辑上作为两个不同的表使用。</p><p>例如查询编号为7369的员工的上级领导姓名及编号：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token number">e</span><span class="token punctuation">.</span>ename<span class="token punctuation">,</span><span class="token number">e</span><span class="token punctuation">.</span>empno<span class="token punctuation">,</span><span class="token number">a</span><span class="token punctuation">.</span>ename<span class="token punctuation">,</span><span class="token number">a</span><span class="token punctuation">.</span>empno <span class="token keyword">from</span> emp <span class="token number">e</span><span class="token punctuation">,</span>emp <span class="token number">a</span> <span class="token keyword">where</span> <span class="token number">e</span><span class="token punctuation">.</span>mgr<span class="token operator">=</span><span class="token number">a</span><span class="token punctuation">.</span>empno  <span class="token operator">and</span> <span class="token number">e</span><span class="token punctuation">.</span>empno<span class="token operator">=</span><span class="token number">7369</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>子查询</li></ul><ul><li>decode 与 case用法详解</li></ul><p>decode作为一个一般函数经常被大家忽视，其实它的作用是巨大的，<br>decode函数相当于一个条件语句,它将输入数值与函数中的参数相比较，<br>根据输入值返回一个对应值,函数的参数是由若干数值及其对应结果值组成,<br>当然，如果未能与任何一个参数匹配成功，则函数也有默认的返回值。<br>区别于SQL的其它函数，decode函数还能 识别和操作 空值，decode是Oracle特有的函数。<br>我们此处学习decode，主要是学习通过decode如何实现表的转置。</p><pre class="line-numbers language-sql"><code class="language-sql">DECODE<span class="token punctuation">(</span><span class="token keyword">value</span><span class="token punctuation">,</span> if1<span class="token punctuation">,</span> then1<span class="token punctuation">,</span> if2<span class="token punctuation">,</span> then2<span class="token punctuation">,</span> if3<span class="token punctuation">,</span> then3<span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>ifn<span class="token punctuation">,</span> thenn<span class="token punctuation">,</span> <span class="token keyword">else</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>表示如果value等于if1时，DECODE函数的结果返回then1,…,如果不等于任何一个if值，则返回else。<br>亦即：decode(条件,值1,翻译值1,值2,翻译值2,…值n,翻译值n,缺省值)</p><p>行列互换，例：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> TEST<span class="token punctuation">(</span><span class="token string">"ID"</span> NUMBER<span class="token punctuation">,</span><span class="token string">"KC"</span> VARCHAR2<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"CJ"</span> NUMBER<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> TEST <span class="token punctuation">(</span>ID<span class="token punctuation">,</span> KC<span class="token punctuation">,</span> CJ<span class="token punctuation">)</span><span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'语文'</span><span class="token punctuation">,</span> <span class="token number">89</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> TEST <span class="token punctuation">(</span>ID<span class="token punctuation">,</span> KC<span class="token punctuation">,</span> CJ<span class="token punctuation">)</span><span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'语文'</span><span class="token punctuation">,</span> <span class="token number">98</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> TEST <span class="token punctuation">(</span>ID<span class="token punctuation">,</span> KC<span class="token punctuation">,</span> CJ<span class="token punctuation">)</span><span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'数学'</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> TEST <span class="token punctuation">(</span>ID<span class="token punctuation">,</span> KC<span class="token punctuation">,</span> CJ<span class="token punctuation">)</span><span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'语文'</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> TEST <span class="token punctuation">(</span>ID<span class="token punctuation">,</span> KC<span class="token punctuation">,</span> CJ<span class="token punctuation">)</span><span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'数学'</span><span class="token punctuation">,</span> <span class="token number">73</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> TEST <span class="token punctuation">(</span>ID<span class="token punctuation">,</span> KC<span class="token punctuation">,</span> CJ<span class="token punctuation">)</span><span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'英语'</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">commit</span><span class="token punctuation">;</span>DECODE<span class="token punctuation">(</span><span class="token keyword">value</span><span class="token punctuation">,</span> if1<span class="token punctuation">,</span> then1<span class="token punctuation">,</span> if2<span class="token punctuation">,</span> then2<span class="token punctuation">,</span> if3<span class="token punctuation">,</span> then3<span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>ifn<span class="token punctuation">,</span> thenn<span class="token punctuation">,</span> <span class="token keyword">else</span><span class="token punctuation">)</span><span class="token keyword">SELECT</span> <span class="token string">"DECODE"</span><span class="token punctuation">(</span><span class="token string">"ID"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'一年级'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'二年级'</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'三年级'</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"SUM"</span><span class="token punctuation">(</span><span class="token string">"DECODE"</span><span class="token punctuation">(</span><span class="token string">"KC"</span><span class="token punctuation">,</span> <span class="token string">'语文'</span><span class="token punctuation">,</span> <span class="token string">"CJ"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token string">"语文"</span><span class="token punctuation">,</span><span class="token string">"SUM"</span><span class="token punctuation">(</span><span class="token string">"DECODE"</span><span class="token punctuation">(</span><span class="token string">"KC"</span><span class="token punctuation">,</span> <span class="token string">'数学'</span><span class="token punctuation">,</span> <span class="token string">"CJ"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token string">"数学"</span><span class="token punctuation">,</span><span class="token string">"SUM"</span><span class="token punctuation">(</span><span class="token string">"DECODE"</span><span class="token punctuation">(</span><span class="token string">"KC"</span><span class="token punctuation">,</span> <span class="token string">'英语'</span><span class="token punctuation">,</span> <span class="token string">"CJ"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token string">"英语"</span><span class="token keyword">FROM</span> <span class="token string">"TEST"</span><span class="token keyword">GROUP</span> <span class="token keyword">BY</span> <span class="token string">"ID"</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">--!!!ID分组</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="表操作"><a href="#表操作" class="headerlink" title="表操作"></a>表操作</h2><ul><li>复制表</li></ul><p>工作中，给某一张表创建复制表是很有必要的一件事，</p><p>复制一般有两种方式：<br>一是复制表结构，一是复制结构和数据。</p><p>例如，创建emp表的复制表，代码如下：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> myemp <span class="token keyword">as</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果只是要复制表结构，只需要在语句后面添加一个不成立的等式即可：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> myemp <span class="token keyword">as</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> <span class="token number">1</span><span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>创建表</li></ul><p>创建表的语法结构是：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> 表名 <span class="token punctuation">(</span>列名 列属性，列名 列属性<span class="token punctuation">)</span>  <span class="token keyword">tablespace</span> 表空间名；<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>现在要求创建一张学生表，包含三个属性，分别是：<br>学生姓名（sname）字符型、学生年龄（sage）数值型、学生班级（cname）字符型，<br>建表语句如下：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> stu <span class="token punctuation">(</span>    sname VARCHAR2 <span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    sage NUMBER <span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    cname VARCHAR2 <span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">TABLESPACE</span> USERS<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>有时候在创建表的时候，需要给列插入说明，创建方法如下：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> test<span class="token punctuation">(</span>num number<span class="token punctuation">,</span>name varchar2<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">comment</span> <span class="token keyword">on</span> <span class="token keyword">column</span> test<span class="token punctuation">.</span>num <span class="token operator">is</span> <span class="token string">'1表示大客户，2表示一般客户'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>删除表用drop：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">drop</span> <span class="token keyword">table</span> stu<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>清空表用truncate：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">truncate</span> <span class="token keyword">table</span> stu<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>插入</li></ul><p>一般插入数据有两种方法：<br>一是不需要指定列名直接插入值，要求就是插入的值从数量、类型、顺序必须与表中的列名保持一致；<br>一是指定给那些列插入值，然后给相应列插值：</p><pre class="line-numbers language-sql"><code class="language-sql"> <span class="token keyword">insert</span> <span class="token keyword">into</span> stu <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token string">'fan'</span><span class="token punctuation">,</span><span class="token number">24</span><span class="token punctuation">,</span><span class="token string">'数学一班'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">insert</span> <span class="token keyword">into</span> stu<span class="token punctuation">(</span>sname<span class="token punctuation">,</span>sage<span class="token punctuation">,</span>cname<span class="token punctuation">)</span> <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token string">'huang'</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">,</span><span class="token string">'数学二班'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">insert</span> <span class="token keyword">into</span> stu <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token string">'zhu'</span><span class="token punctuation">,</span><span class="token boolean">null</span><span class="token punctuation">,</span><span class="token string">'数学三班'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>to_date在表插入值时的应用</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> stu <span class="token punctuation">(</span>sname varchar2<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>sage number<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span>cname varchar2<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span> birthday <span class="token keyword">date</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> stu <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'rxxt'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'shu0841'</span><span class="token punctuation">,</span>to_date<span class="token punctuation">(</span><span class="token string">'2015-01-01'</span><span class="token punctuation">,</span><span class="token string">'yyyy-mm-dd'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>为了操作的方便，可以临时的对当前会话的日期格式进行一下更改，譬如：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">alter</span> <span class="token keyword">session</span> <span class="token keyword">set</span> nls_date_format<span class="token operator">=</span><span class="token string">'yyyy-mm-dd'</span><span class="token punctuation">;</span>　<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>批量插值</li></ul><p>批量插值的例子：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> emp1 <span class="token keyword">as</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> <span class="token number">1</span><span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> emp1 <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp<span class="token punctuation">;</span><span class="token keyword">create</span> <span class="token keyword">table</span> test <span class="token punctuation">(</span>id number<span class="token punctuation">,</span>name varchar2<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> test <span class="token keyword">select</span> empno<span class="token punctuation">,</span>ename <span class="token keyword">from</span> emp <span class="token keyword">where</span> deptno<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>多表插值</li></ul><p>insert all into：将相同的数据一次性插入到多张表中</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> emp1 <span class="token keyword">as</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> <span class="token number">1</span><span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">create</span> <span class="token keyword">table</span> emp2 <span class="token keyword">as</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> <span class="token number">1</span><span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">ALL</span> <span class="token keyword">INTO</span> emp1 <span class="token keyword">INTO</span> emp2 <span class="token keyword">SELECT</span>    <span class="token operator">*</span><span class="token keyword">FROM</span>    emp<span class="token keyword">WHERE</span>    deptno <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>insert all into 限定条件用 when then</p><blockquote><p>通过不同的条件，将内容分别插入到不同的表中</p></blockquote><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">insert</span> <span class="token keyword">all</span>     <span class="token keyword">when</span> comm <span class="token operator">is</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">then</span> <span class="token keyword">into</span> emp1     <span class="token keyword">when</span> comm <span class="token operator">is</span> <span class="token boolean">null</span> <span class="token keyword">then</span> <span class="token keyword">into</span> emp2      <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> deptno <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>更新</li></ul><p>修改表中记录用update语句，<br>对于update语句，一定要有where限定条件，<br>要不会修改整个表的数据，</p><p>修改emp表中员工的奖金，要求是工资大于2000的员工奖金加100： </p><pre class="line-numbers language-sql"><code class="language-sql">     <span class="token keyword">update</span> emp <span class="token keyword">set</span> comm<span class="token operator">=</span>nvl<span class="token punctuation">(</span>comm<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">100</span> <span class="token keyword">where</span> sal<span class="token operator">></span><span class="token number">2000</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>删除</li></ul><p>delete 需要注意的是要根据需求加 where 限定条件，如果不加的话会删除整张表的数据：</p><pre class="line-numbers language-sql"><code class="language-sql">       <span class="token keyword">delete</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> deptno<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>思考：create、drop、truncate、insert、update、delete在用法上有什么区别？</p><p>create、drop、truncate系统自动提交，insert、update、delete用户需要手动提交或者回滚</p><blockquote><p>DML DDL DQL ???</p></blockquote><p><a href="http://www.cnblogs.com/henryhappier/archive/2010/07/05/1771295.html" target="_blank" rel="noopener">文</a></p><p>SQL四种语言：DDL,DML,DCL,TCL</p><p>1.DDL（Data Definition Language）数据库定义语言statements are used to define the database structure or schema.</p><p>DDL是SQL语言的四大功能之一。<br>用于定义数据库的三级结构，包括外模式、概念模式、内模式及其相互之间的映像，定义数据的完整性、安全控制等约束<br>DDL不需要commit.</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">CREATE</span><span class="token keyword">ALTER</span><span class="token keyword">DROP</span><span class="token keyword">TRUNCATE</span><span class="token keyword">COMMENT</span><span class="token keyword">RENAME</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.DML（Data Manipulation Language）数据操纵语言statements are used for managing data within schema objects.</p><p>由DBMS提供，用于让用户或程序员使用，实现对数据库中数据的操作。<br>DML分成交互型DML和嵌入型DML两类。<br>依据语言的级别，DML又可分成过程性DML和非过程性DML两种。<br>需要commit.</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span><span class="token keyword">INSERT</span><span class="token keyword">UPDATE</span><span class="token keyword">DELETE</span><span class="token keyword">MERGE</span><span class="token keyword">CALL</span><span class="token keyword">EXPLAIN</span> <span class="token keyword">PLAN</span><span class="token keyword">LOCK</span> <span class="token keyword">TABLE</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3.DCL（Data Control Language）数据库控制语言  授权，角色控制等</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">GRANT</span> 授权<span class="token keyword">REVOKE</span> 取消授权<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>4.TCL（Transaction Control Language）事务控制语言</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SAVEPOINT</span> 设置保存点<span class="token keyword">ROLLBACK</span>  回滚<span class="token keyword">SET</span> <span class="token keyword">TRANSACTION</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>SQL主要分成四部分：<br>（1）数据定义。（SQL DDL）用于定义SQL模式、基本表、视图和索引的创建和撤消操作。<br>（2）数据操纵。（SQL DML）数据操纵分成数据查询和数据更新两类。数据更新又分成插入、删除、和修改三种操作。<br>（3）数据控制。包括对基本表和视图的授权，完整性规则的描述，事务控制等内容。<br>（4）嵌入式SQL的使用规定。涉及到SQL语句嵌入在宿主语言程序中使用的规则。</p><ul><li>删除重复行</li></ul><p>对于没有主键约束或者唯一约束的表，出现完全重复的数据的可能性是很大的，<br>那么如何删除一张表中重复的数据只保留一条哪？<br>大家知道，一般的where条件根本无法限制，因为数据都一样，<br>此处要用到 rowid 关键字，rowid是一个十八位的十六进制字符串，它是每一条记录的物理标识，<br>不会有重复的rowid出现，根据rowid的这一属性，我们可以采取保留rowid最大或者最小的记录.</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">DELETE</span><span class="token keyword">FROM</span>    <span class="token string">"TEST"</span> E<span class="token keyword">WHERE</span>    ROWID <span class="token operator">&lt;</span> <span class="token punctuation">(</span>        <span class="token keyword">SELECT</span>            <span class="token function">MAX</span> <span class="token punctuation">(</span>ROWID<span class="token punctuation">)</span>        <span class="token keyword">FROM</span>            <span class="token string">"TEST"</span> A        <span class="token keyword">WHERE</span>            A <span class="token punctuation">.</span> ID <span class="token operator">=</span> <span class="token number">3</span>        <span class="token operator">AND</span>             E <span class="token punctuation">.</span> ID <span class="token operator">=</span> A <span class="token punctuation">.</span> ID    <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>删除后rowid变化！！！？？？</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token string">"SCOTT"</span><span class="token punctuation">.</span><span class="token string">"TEST"</span> <span class="token punctuation">(</span><span class="token string">"ID"</span><span class="token punctuation">,</span> <span class="token string">"KC"</span><span class="token punctuation">,</span> <span class="token string">"CJ"</span><span class="token punctuation">,</span> <span class="token string">"SEX"</span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'3'</span><span class="token punctuation">,</span> <span class="token string">'英语'</span><span class="token punctuation">,</span> <span class="token string">'25'</span><span class="token punctuation">,</span> <span class="token boolean">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">SELECT</span>            ROWID        <span class="token keyword">FROM</span>            <span class="token string">"TEST"</span> A        <span class="token keyword">WHERE</span>            A <span class="token punctuation">.</span><span class="token string">"ID"</span> <span class="token operator">=</span> <span class="token number">3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>？？？</p><p>增加列</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">alter</span> <span class="token keyword">table</span> <span class="token string">"TEST"</span> <span class="token keyword">add</span> <span class="token punctuation">(</span>sex number<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">--以下方式报错，不可使用</span><span class="token keyword">alter</span> <span class="token keyword">table</span> <span class="token string">"TEST"</span> <span class="token keyword">add</span> <span class="token keyword">column</span> <span class="token string">"s"</span> number<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>删除列</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">alter</span> <span class="token keyword">table</span> emp1 <span class="token keyword">drop</span> <span class="token punctuation">(</span>sex<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">alter</span> <span class="token keyword">table</span> emp1 <span class="token keyword">drop</span> <span class="token keyword">column</span> sex<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>修改列：<br>  1.如果列中有数据，列的类型是无法修改的，只可以修改大小，而且修改之后的长度不能小于已有数据的长度；<br>  2.如果列中没有数据，列的大小可以随意更改，<br>    如果列中有数据,<br>            char/number 只可以往大的改，不可以改小，<br>            varchar2 既可以改大也可以改小  </p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">alter</span> <span class="token keyword">table</span> emp1 <span class="token keyword">modify</span><span class="token punctuation">(</span>sex number<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">alter</span> <span class="token keyword">table</span> emp1 <span class="token keyword">modify</span><span class="token punctuation">(</span>sex number<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">alter</span> <span class="token keyword">table</span> emp1 <span class="token keyword">modify</span><span class="token punctuation">(</span>sex number<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">alter</span> <span class="token keyword">table</span> emp1 <span class="token keyword">modify</span><span class="token punctuation">(</span>sex varchar2<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> Oracle </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>大创项目结题-感</title>
      <link href="/2017/06/13/%E5%A4%A7%E5%88%9B%E9%A1%B9%E7%9B%AE%E7%BB%93%E9%A2%98-%E6%84%9F/"/>
      <url>/2017/06/13/%E5%A4%A7%E5%88%9B%E9%A1%B9%E7%9B%AE%E7%BB%93%E9%A2%98-%E6%84%9F/</url>
      <content type="html"><![CDATA[<p>待续</p>]]></content>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Travis-CI自动部署Hexo记录</title>
      <link href="/2017/06/12/Travis-CI%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2Hexo%E8%AE%B0%E5%BD%95/"/>
      <url>/2017/06/12/Travis-CI%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2Hexo%E8%AE%B0%E5%BD%95/</url>
      <content type="html"><![CDATA[<p>记录实验过程中踩的坑和收获。</p><p>过程参考<a href="http://blog.csdn.net/woblog/article/details/51319364" target="_blank" rel="noopener">文</a></p><blockquote><p>本地配置并测试过了Hexo + Material，为了方便日后的跨设备更博，遂尝试Travis-CI自动部署</p></blockquote><p>远程github库中新建blog-source分支，用以存放源文件。<br>本地已有的Hexo文件夹中，<code>git init</code>然后一通关联远程，然后push<br>失败，失败，失败……</p><h2 id="push-失败"><a href="#push-失败" class="headerlink" title="push 失败"></a>push 失败</h2><p>暂时移走blog文件夹下的全部内容，克隆远程库，生成如下目录结构：</p><ul><li>blog<ul><li>MrNickLock.github.io<ul><li>.git</li><li>其他内容</li></ul></li></ul></li></ul><p>直接把全部内容移到blog下</p><ul><li>blog<ul><li>.git</li><li>其他内容</li><li>删除空目录MrNickLock.github.io</li></ul></li></ul><p><strong>Get!</strong><br>应该主要是 .git 目录的锅，再push，done！</p><h2 id="material主题集成失败"><a href="#material主题集成失败" class="headerlink" title="material主题集成失败"></a>material主题集成失败</h2><p>这是material主题配置文件被忽略，push到github的blog-source文件中根本没有_config.yml，修改material目录下 .gitignore 文件，解除忽略（todo<br>：再进一步了解.gitignore文件的作用）</p><blockquote><p>关于刷新忽略文件，见上篇博文。</p></blockquote>]]></content>
      
      
        <tags>
            
            <tag> 配置 </tag>
            
            <tag> 记录 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>git不完全笔记</title>
      <link href="/2017/06/11/git%E4%B8%8D%E5%AE%8C%E5%85%A8%E7%AC%94%E8%AE%B0/"/>
      <url>/2017/06/11/git%E4%B8%8D%E5%AE%8C%E5%85%A8%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<p>记录平时学习和使用的git知识。</p><h2 id="hexo搭博客时用到的git命令"><a href="#hexo搭博客时用到的git命令" class="headerlink" title="hexo搭博客时用到的git命令"></a>hexo搭博客时用到的git命令</h2><ul><li><strong>ssh免密登录github</strong></li></ul><pre class="line-numbers language-bash"><code class="language-bash">ssh-keygen -t rsa -C <span class="token string">"hanziqiabc@gmail.com"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>key生成于~/.ssh/id_rsa.pub</p><ul><li><strong>关联远程仓库</strong>:</li></ul><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> remote add origin git@github.com:MrNickLock/MrNickLock.github.io.git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><strong>把本地库的所有内容推送到远程库上</strong>：</li></ul><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> push -u origin master <span class="token comment" spellcheck="true">#第一次</span><span class="token function">git</span> push origin master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>创建分支，切换分支</li></ul><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> checkout -b blog-source <span class="token comment" spellcheck="true">#git checkout命令加上-b参数表示创建并切换，相当于以下两条命令：</span><span class="token function">git</span> branch blog-source<span class="token function">git</span> checkout blog-source<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>git忽略规则</strong><br><a href="http://www.pfeng.org/archives/840" target="_blank" rel="noopener">文</a></li></ul><blockquote><p>在git中如果想忽略掉某个文件，不让这个文件提交到版本库中，可以使用修改根目录中 .gitignore 文件的方法（如无，则需自己手工建立此文件）。这个文件每一行保存了一个匹配的规则例如：</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 此为注释 – 将被 Git 忽略</span>*.a       <span class="token comment" spellcheck="true"># 忽略所有 .a 结尾的文件</span><span class="token operator">!</span>lib.a    <span class="token comment" spellcheck="true"># 但 lib.a 除外</span>/TODO     <span class="token comment" spellcheck="true"># 仅仅忽略项目根目录下的 TODO 文件，不包括 subdir/TODO</span>build/    <span class="token comment" spellcheck="true"># 忽略 build/ 目录下的所有文件</span>doc/*.txt <span class="token comment" spellcheck="true"># 会忽略 doc/notes.txt 但不包括 doc/server/arch.txt </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><em>规则未生效</em></li></ul><blockquote><p>未生效，原因是.gitignore只能忽略那些原来没有被track的文件，如果某些文件已经被纳入了版本管理中，则修改.gitignore是无效的。那么解决方法就是先把本地缓存删除（改变成未track状态），然后再提交：</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> <span class="token function">rm</span> -r --cached <span class="token keyword">.</span><span class="token function">git</span> add <span class="token keyword">.</span><span class="token function">git</span> commit -m <span class="token string">'update .gitignore'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li><strong>cmder 之 绿色版git for win 中文路径问题</strong>——<a href="http://939999807.iteye.com/blog/2227859" target="_blank" rel="noopener">文</a></li></ul><p><code>git status</code> 显示中文路径乱码。</p><blockquote><p>在git项目目录中执行<code>git config core.quotepath false</code>就可以解决了</p></blockquote><blockquote><p>也可以执行<code>git config --global core.quotepath false</code>进行全局设置</p></blockquote>]]></content>
      
      
    </entry>
    
    <entry>
      <title>Hexoの备忘录</title>
      <link href="/2017/06/10/Hexo%E3%81%AE%E5%A4%87%E5%BF%98%E5%BD%95/"/>
      <url>/2017/06/10/Hexo%E3%81%AE%E5%A4%87%E5%BF%98%E5%BD%95/</url>
      <content type="html"><![CDATA[<p>~个人hexo博客的使用经验记录~</p><h3 id="快速新建博文（搭配cmder）"><a href="#快速新建博文（搭配cmder）" class="headerlink" title="快速新建博文（搭配cmder）"></a>快速新建博文（搭配cmder）</h3><blockquote><p>笔者win10，自定义批处理命令置于mycmd下</p></blockquote><ul><li>mycmd下新建blog.bat</li><li>写入命令如下：</li></ul><hr><p><code>old code</code></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">cd</span> d:\GoogleDrive\NoteBook\blog\source\_posts <span class="token comment" spellcheck="true">#切入博文目录</span>explorer <span class="token keyword">.</span>  <span class="token comment" spellcheck="true">#在资源管理器中打开当前目录</span>hexo new %1 <span class="token comment" spellcheck="true">#新建指定名称的博文</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>键入<code>blog 博文标题</code>命令，<code>hexo new %1</code> 接收传递的第一个参数 <code>%1</code> 作为新博文名称。</p></blockquote><p><em>注</em>：原计划新建博文，并用sublime打开编辑，无奈hexo new命令之后就中断了，退而求其次，才有了如上方法。日后改进。</p><hr><p><strong>更新</strong><br>优化体验：</p><ul><li>不再自动打开资源管理器；</li><li>自动用sublime打开新笔记</li></ul><pre class="line-numbers language-bash"><code class="language-bash">d:                                            <span class="token function">cd</span> d:\GoogleDrive\NoteBook\blog\source\_posts                             <span class="token keyword">if</span> <span class="token string">"%1"</span><span class="token operator">==</span><span class="token string">""</span> goto :end                         st %1.md <span class="token comment" spellcheck="true">#先打开空的新笔记</span>hexo new %1 <span class="token comment" spellcheck="true">#hexo new 写入信息，st可自动刷新</span>:end                                          <span class="token keyword">echo</span> 退出                                       <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="博客源文件备份（搭配GoogleDrive）"><a href="#博客源文件备份（搭配GoogleDrive）" class="headerlink" title="博客源文件备份（搭配GoogleDrive）"></a>博客源文件备份（搭配GoogleDrive）</h3><ul><li>科学上网</li><li>GoogleDrive关联本地，新建blog文件夹</li><li>在blog文件夹中初始化Hexo</li></ul><p><strong>优点</strong>：实时同步，还有回收站，安全有保障；</p><p><strong>缺点</strong>：source文件夹和public文件夹重复的文件都会占用云盘空间</p><hr><p>更新:<br>在CI自动部署时，本地public文件夹为空，编译在CI执行，源文件blog-source备份于GoogleDrive，push于远程库的blog-source分支，安全，跨平台。</p><blockquote><p>此更新写于安卓端(Pocket Git + JotterPad)</p></blockquote><hr><h3 id="自动检测文件变化并编译（安装-Hexo-Server）"><a href="#自动检测文件变化并编译（安装-Hexo-Server）" class="headerlink" title="自动检测文件变化并编译（安装 Hexo Server）"></a>自动检测文件变化并编译（安装 Hexo Server）</h3><blockquote><p>参考hexo官方文档</p></blockquote>]]></content>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>随笔-毕业</title>
      <link href="/2017/06/06/%E9%9A%8F%E7%AC%94-%E6%AF%95%E4%B8%9A/"/>
      <url>/2017/06/06/%E9%9A%8F%E7%AC%94-%E6%AF%95%E4%B8%9A/</url>
      <content type="html"><![CDATA[<p>临近毕业，琐事繁多。在忙碌中，记录下自己近日所想。</p><h2 id="折腾-笔记-和-博客-的反思"><a href="#折腾-笔记-和-博客-的反思" class="headerlink" title="折腾 笔记 和 博客 的反思"></a>折腾 笔记 和 博客 的反思</h2><p>自己大费周章地学习MarkDown、寻找中意的编辑器，尝试了众多（包括此刻正在用的 SublimeText3，还有马克飞象、小书匠、leanote蚂蚁笔记、有道云、印象笔记、为知笔记，以及简书、CSDN、OSChina开源中国、博客园等等……）。<br>But，最终还是回到了最简的 SublimeText3 ,因为轻快。</p><p>再回想当初选择用MD写笔记，更多的是盲目地追求高逼格，现在更明白，用MD就是为了不用操心 排版、样式，更专注于内容，为的是高效快捷。然而，之前的我，太过于苛求华丽的预览，更多的拓展。恰恰是走了相反的方向。为此花费了大把的时间。</p><p>待续……</p><hr><p><em>续</em></p>]]></content>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>团委网站发布说明</title>
      <link href="/2017/05/05/%E5%9B%A2%E5%A7%94%E7%BD%91%E7%AB%99%E5%8F%91%E5%B8%83%E8%AF%B4%E6%98%8E/"/>
      <url>/2017/05/05/%E5%9B%A2%E5%A7%94%E7%BD%91%E7%AB%99%E5%8F%91%E5%B8%83%E8%AF%B4%E6%98%8E/</url>
      <content type="html"><![CDATA[<h1 id="数据库-sql-server-2012-兼容2005"><a href="#数据库-sql-server-2012-兼容2005" class="headerlink" title="数据库(sql server 2012 兼容2005)"></a>数据库(sql server 2012 兼容2005)</h1><blockquote><p>文件位置： <strong>TW_JLMU/db/</strong><br>数据库名： <strong><em>TW_JLMU</em></strong><br>加载方式： <strong>附加</strong></p></blockquote><h1 id="兼容-net2-0-发布"><a href="#兼容-net2-0-发布" class="headerlink" title="兼容 .net2.0 发布"></a>兼容 .net2.0 发布</h1><blockquote><p>Web.Config 文件配置</p></blockquote><pre class="line-numbers language-xml"><code class="language-xml">  <span class="token comment" spellcheck="true">&lt;!--注：requestValidationMode="2.0"            此处为发布兼容选项，        debug时需删除，发布时需添加    --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>httpRuntime</span> <span class="token attr-name">requestValidationMode</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2.0<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      <categories>
          
          <category> code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> readme </tag>
            
            <tag> 项目说明 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Sqoop</title>
      <link href="/2017/04/06/sqoop/"/>
      <url>/2017/04/06/sqoop/</url>
      <content type="html"><![CDATA[<pre><code>大数据:spark(scala),storm,flink,hbase(redis,newSql),flume,kafka,HUE,ooize消息中间件,(metaQ,rabbitQ,kafka)平台(CM)java JVM调优人工智能AI数据挖掘,推荐系统(各种复杂的算法 线性回归,聚类,分类)离散数据,数据结构,统计学Spark sparkSql spark streaming spark mlib  mahout+pig用户画像java(设计模式,jvm调优,集合,多线程并发)大秒系统,hive(impala,tez，spark sql),mapreduce,hdfslinux</code></pre><h3 id="安装配置"><a href="#安装配置" class="headerlink" title="安装配置"></a>安装配置</h3><ol><li><p>下载sqoop <a href="http://archive.cloudera.com/cdh5/cdh/5/(下载cdh版本地址)" target="_blank" rel="noopener">http://archive.cloudera.com/cdh5/cdh/5/(下载cdh版本地址)</a><br>cdh</p></li><li><p>上传tar包，并解压<br>tar -zxvf xxx.tar -C ../softwores/<br>unzip xxx.zip</p></li><li><p>配置sqoop-env.sh文件<br><a href="http://sqoop.apache.org/docs/1.4.5/SqoopUserGuide.html（文档说明）" target="_blank" rel="noopener">http://sqoop.apache.org/docs/1.4.5/SqoopUserGuide.html（文档说明）</a><br>配置<br><code>$SQOOP_HOEM/conf/sqoop-env.sh</code></p></li><li>copy mysql驱动到<br><code>$SQOOP_HOME/lib</code>目录下</li><li>进行简单的测试</li></ol><pre class="line-numbers language-bash"><code class="language-bash">bin/sqoop list-databases \--connect jdbc:mysql://hadoop:3306 \--username root \--password 123456bin/sqoop list-tables \--connect jdbc:mysql://hadoop:3306/mysql \--username root \--password 123456<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="import-export-以hdfs为主体，以RDBMS-如mysql-为客体"><a href="#import-export-以hdfs为主体，以RDBMS-如mysql-为客体" class="headerlink" title="import|export  以hdfs为主体，以RDBMS(如mysql)为客体"></a>import|export  以hdfs为主体，以RDBMS(如mysql)为客体</h3><h4 id="import-mysql-gt-hdfs"><a href="#import-mysql-gt-hdfs" class="headerlink" title="import(mysql -&gt; hdfs):"></a>import(mysql -&gt; hdfs):</h4><p>drop tables if exists customer;<br>CREATE TABLE customer (<br>  id tinyint(4) NOT NULL AUTO_INCREMENT,<br>  name varchar(255) DEFAULT NULL,<br>  passwd varchar(255) DEFAULT NULL,<br>  PRIMARY KEY (id)<br>);<br>INSERT INTO customer VALUES (1, ‘admin’, ‘admin’);<br>INSERT INTO customer VALUES (2, ‘dehua’, ‘dehua’);<br>INSERT INTO customer VALUES (3, ‘system’, ‘123456’);<br>INSERT INTO customer VALUES (4, ‘jack’, ‘ja123’);<br>INSERT INTO customer VALUES (5, ‘lol’, ‘user123’);<br>INSERT INTO customer VALUES (6, ‘helloword’, ‘leijun’);<br>INSERT INTO customer VALUES (7, ‘beijing’, ‘hqph’);<br>INSERT INTO customer VALUES (8, ‘wumengda’, ‘123456’);<br>INSERT INTO customer2 VALUES (9, ‘canglaoshi’, ‘yamadei’);</p><p>12,canglaoshi,111111<br>13,bolaoshi,123123<br>14,guanxige,123456</p><p>import<br>bin/sqoop import –help</p><p> –table 指定表名<br> –target-dir 指定导入路径<br> –as-parquetfile  导入的存储类型<br> -m,–num-mappers  指定map个数(在mysql创建表的时候,尽量添加主键)<br> –fields-terminated-by 行之间的分隔符<br> –columns &lt;col,col,col…&gt;  指定导入哪些字段<br> -e,–query <statement>  查询结果集<br> join<br> -z,–compress (指定压缩类型)<br> –compression-codec <codec>(具体是哪种压缩格式) snappy(lzo)<br> 压缩以及解压速度是很可观集群机器参差不齐 谷歌开源的压缩算法<br> –incremental <import-type> (增量的导入)<br> –direct(对导mysql的数据的优化)</import-type></codec></statement></p><p>(如果不指定目录，默认在当前用户目录下/user/root/ /user/用户名/)<br>(url,username,password,table)<br>目的：把mysql中customer表中的数据导入到hdfs之上<br>bin/sqoop import \<br>–connect jdbc:mysql://hadoop:3306/test \<br>–username root \<br>–password 123456 \<br>–table customer </p><p>(指定目录，并设置map数,map数就是sqoop并行的体现,调整map个数是一种sqoop job的优化方式)<br>bin/sqoop import \<br>–connect jdbc:mysql://hadoop:3306/test \<br>–username root \<br>–password 123456 \<br>–table customer \<br>–delete-target-dir \<br>–target-dir /user/root/sqoop/import_customer \<br>–num-mappers 1(-m 2)</p><p>(指定存储到hdfs上的存储的格式)<br>bin/sqoop import \<br>–connect jdbc:mysql://hadoop:3306/test \<br>–username root \<br>–password 123456 \<br>–table customer \<br>–target-dir /user/root/sqoop/txt_import \<br>–fields-terminated-by ‘,’ \<br>–delete-target-dir \<br>-m 1 \<br>–as-textfile</p><p>bin/sqoop import \<br>–connect jdbc:mysql://hadoop:3306/test \<br>–username root \<br>–password 123456 \<br>–table customer \<br>–target-dir /user/root/sqoop/parquet_import \<br>–fields-terminated-by ‘,’ \<br>–delete-target-dir \<br>–num-mappers 2 \<br>–as-parquetfile </p><p>(在hive中创建表)<br>drop table if exists hive_user_parquet;<br>create table hive_user_parquet(<br>id int,<br>username string,<br>password string<br>)<br>ROW FORMAT DELIMITED FIELDS TERMINATED BY ‘,’<br>STORED AS parquet ;<br>load data inpath ‘/user/root/sqoop/parquet_import’ into table hive_user_parquet;</p><p>drop table if exists hive_user_textfile ;<br>create table hive_user_textfile(<br>id int,<br>username string,<br>password string<br>)<br>ROW FORMAT DELIMITED FIELDS TERMINATED BY ‘,’<br>STORED AS textfile ;<br>load data inpath ‘/user/root/sqoop/txt_import’ into table hive_user_textfile;</p><p>parquet格式为null((1.4.5的bug)1.4.6)</p><p>(指定导入的字段，为过滤字段)<br>bin/sqoop import \<br>–connect jdbc:mysql://hadoop:3306/test \<br>–username root \<br>–password 123456 \<br>–table customer \<br>–target-dir /user/root/sqoop/imp_customer_column \<br>–num-mappers 1 \<br>–columns id,name</p><p>bin/sqoop import \<br>–connect jdbc:mysql://hadoop:3306/test \<br>–username root \<br>–password 123456 \<br>–query ‘select id, name from customer’ \<br>–target-dir /user/root/sqoop/imp_my_user_query \<br>–num-mappers 1</p><p>(在使用query关键字时，where条件必须加 ‘$CONDITIONS’ )<br>16/11/05 18:46:03 ERROR tool.ImportTool: Encountered IOException running import job: java.io.IOException: Query [select id, account from customer] must contain ‘$CONDITIONS’ in WHERE clause.<br>        at org.apache.sqoop.manager.ConnManager.getColumnTypes(ConnManager.java:300)<br>        at org.apache.sqoop.orm.ClassWriter.getColumnTypes(ClassWriter.java:1833)<br>        at org.apache.sqoop.orm.ClassWriter.generate(ClassWriter.java:1645)<br>        at org.apache.sqoop.tool.CodeGenTool.generateORM(CodeGenTool.java:96)<br>        at org.apache.sqoop.tool.ImportTool.importTable(ImportTool.java:478)<br>        at org.apache.sqoop.tool.ImportTool.run(ImportTool.java:605)<br>        at org.apache.sqoop.Sqoop.run(Sqoop.java:143)<br>        at org.apache.hadoop.util.ToolRunner.run(ToolRunner.java:70)<br>        at org.apache.sqoop.Sqoop.runSqoop(Sqoop.java:179)<br>        at org.apache.sqoop.Sqoop.runTool(Sqoop.java:218)<br>        at org.apache.sqoop.Sqoop.runTool(Sqoop.java:227)<br>        at org.apache.sqoop.Sqoop.main(Sqoop.java:236)</p><p>bin/sqoop import \<br>–connect jdbc:mysql://hadoop:3306/test \<br>–username root \<br>–password 123456 \<br>–query ‘select id, name from customer where $CONDITIONS’ \<br>–target-dir /user/root/sqoop/imp_customer_query \<br>–delete-target-dir \<br>–num-mappers 1</p><p>(在sqoop中使用压缩)<br>–compress<br>–compression-codec</p><p>(导入到hdfs的数据时压缩过，然后在Hive里面创建表，将压缩过的数据给load进去)<br>bin/sqoop import \<br>–connect jdbc:mysql://hadoop:3306/test \<br>–username root \<br>–password 123456 \<br>–table customer \<br>–target-dir /user/root/sqoop/imp_my_snappy2 \<br>–delete-target-dir \<br>–num-mappers 2 \<br>–compress \<br>–compression-codec org.apache.hadoop.io.compress.SnappyCodec</p><p>drop table if exists customer_snappy2 ;<br>create table default.customer_snappy2(<br>id int,<br>username string,<br>password string<br>)<br>ROW FORMAT DELIMITED FIELDS TERMINATED BY ‘,’ ;<br>load data inpath ‘/user/root/sqoop/imp_my_snappy2’ into table customer_snappy2 ;</p>]]></content>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> 大数据 </tag>
            
            <tag> Sqoop </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hive</title>
      <link href="/2017/04/05/Hive/"/>
      <url>/2017/04/05/Hive/</url>
      <content type="html"><![CDATA[<h1 id="hive-入门"><a href="#hive-入门" class="headerlink" title="hive 入门"></a>hive 入门</h1><h2 id="hive简介"><a href="#hive简介" class="headerlink" title="hive简介"></a>hive简介</h2><ul><li>hive 是SQL解析引擎，将SQL转化为MR job 在hadoop执行</li><li>hive表即 hdfs 的目录/文件夹（按照表名将文件夹分开）<ul><li>若为分区表，则分区值是子文件夹</li></ul></li></ul><h2 id="hive系统架构"><a href="#hive系统架构" class="headerlink" title="hive系统架构"></a>hive系统架构</h2><ul><li><p>用户接口</p><ul><li>CLI 命令行客户端</li><li>JDBC/ODBC</li><li>WebUI</li></ul></li><li><p>元数据存储 metastore </p><ul><li>derby（默认）</li><li>mysql 等</li></ul></li><li><p>解释器、编译器、优化器、执行器</p></li><li>hadoop：用hdfs进行存储，用MR进行计算</li></ul><blockquote><p>元数据 存于metastore<br>（实际）数据存于 HDFS ：库表以文件夹形式，数据以文件形式</p></blockquote><h2 id="mysql中元数据"><a href="#mysql中元数据" class="headerlink" title="mysql中元数据"></a>mysql中元数据</h2><ul><li>TBLS，表</li><li>COLUMN_V2 字段</li><li>SDS 位置</li></ul><h2 id="外部表"><a href="#外部表" class="headerlink" title="外部表"></a>外部表</h2><blockquote><p>查看表结构<br>?select create table?</p></blockquote><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">create</span> external <span class="token keyword">table</span>    stu     <span class="token punctuation">(</span>stuno <span class="token keyword">int</span><span class="token punctuation">,</span>name string<span class="token punctuation">)</span>     <span class="token keyword">row</span> format delimited <span class="token keyword">fields</span> <span class="token keyword">terminated by</span> <span class="token string">'\t'</span>     location <span class="token string">'/stu'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="分区表"><a href="#分区表" class="headerlink" title="分区表"></a>分区表</h2><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">create</span> external <span class="token keyword">table</span> stu <span class="token punctuation">(</span><span class="token keyword">int</span> stuno<span class="token punctuation">,</span>string name<span class="token punctuation">)</span> <span class="token keyword">row</span> format delimited <span class="token keyword">fields</span> <span class="token keyword">terminated by</span> <span class="token string">'\t'</span> location <span class="token string">'/stu'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> 大数据 </tag>
            
            <tag> Hive </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>MyLinks ReadMe</title>
      <link href="/2017/04/01/MyLinks%20ReadMe/"/>
      <url>/2017/04/01/MyLinks%20ReadMe/</url>
      <content type="html"><![CDATA[<h1 id="MyLinks-ReadMe"><a href="#MyLinks-ReadMe" class="headerlink" title="MyLinks ReadMe"></a>MyLinks ReadMe</h1><h1 id="ia-wk"><a href="#ia-wk" class="headerlink" title="ia wk"></a>ia wk</h1><p><img src="http://ontpyo03p.bkt.clouddn.com/1493728693531.jpg" alt="初始化"></p><p><img src="http://ontpyo03p.bkt.clouddn.com/1493728741359.jpg" alt="编辑"></p><p><img src="http://ontpyo03p.bkt.clouddn.com/1493728827867.jpg" alt="删除"></p><p><img src="http://ontpyo03p.bkt.clouddn.com/1493728906424.jpg" alt="注册"></p>]]></content>
      
      <categories>
          
          <category> code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> github </tag>
            
            <tag> 开源项目 </tag>
            
            <tag> readme </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
